package com.johncnstn.springbootdemo.softwareengineers.service;

import com.johncnstn.springbootdemo.softwareengineers.entity.SoftwareEngineerEntity;
import com.johncnstn.springbootdemo.softwareengineers.model.SoftwareEngineerDTO;

import java.util.List;

/*
 â›³ PURPOSE:
     - Defines **read-only operations** on Software Engineers (retrieval, lookup).
     - Keeps reads and writes separate (CQRS), increasing flexibility.

 ðŸ¤– WHY AN INTERFACE IN SPRING?

 âœ… 1. Clean Separation of Concerns
     â†’ HOW? This interface contains only read methods.
     â†’ WHY? Avoids accidental mutations or coupling query logic with state changes.

 âœ… 2. Enables Lightweight JDK Proxying for AOP
     â†’ HOW? With this interface, Spring can use dynamic proxying to wrap query methods with:
         - @Cacheable (caching)
         - @Transactional(readOnly = true)
         - Metrics (e.g., execution timing)
     â†’ WHY? JDK proxies donâ€™t require subclassing the implementation class, avoiding CGLIB's quirks like:
         - Failing on final classes/methods
         - Slower proxy creation
         - Risky bytecode manipulation

 âœ… 3. Better Unit Testing
     â†’ HOW? Interfaces are mock-friendly â€” no Spring context needed.
     â†’ WHY? Isolated tests are faster, safer, and donâ€™t require mocking internal beans (like mappers or repositories).
        â†’ You donâ€™t need to load Spring context, mock internal beans, or deal with AOP proxies
        â†’ You can `mock(SoftwareEngineerQueryService.class)` in a unit test
        â†’ @Mock from Mockito instead of @MockitoBean from Spring

 âœ… 4. Future Scalability
     â†’ HOW? Easy to plug in:
         - A caching layer (e.g., `CachingQueryService`)
         - A remote query implementation (e.g., via HTTP or GraphQL)
         - Read replicas or distributed stores (e.g., Elasticsearch, ClickHouse)
     â†’ WHY? Consumers donâ€™t need to change because the interface remains stable.

 âœ… 5. Decorator Pattern for Cross-Cutting Concerns
     â†’ HOW? We can chain implementations like:
         `new LoggingQueryService(new CachingQueryService(new QueryServiceImpl(...)))`
     â†’ WHY? No need to pollute core logic with concerns like metrics, logging, or authorization.

*/
public interface SoftwareEngineerQueryService {
    List<SoftwareEngineerDTO> getAll();

    SoftwareEngineerDTO getById(Integer id);

    SoftwareEngineerEntity getByIdOrThrow(Integer id);
}
