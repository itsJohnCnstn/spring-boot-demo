package com.johncnstn.springbootdemo.softwareengineers.service;

import com.johncnstn.springbootdemo.softwareengineers.model.SoftwareEngineerDTO;
import com.johncnstn.springbootdemo.softwareengineers.model.SoftwareEngineerToCreateDTO;
import com.johncnstn.springbootdemo.softwareengineers.model.SoftwareEngineerToUpdateDTO;

/*
 â›³ PURPOSE:
     - Defines the contract for all **mutating operations** (create, update, delete) on Software Engineers.
     - Used by the controller to abstract persistence and business logic.

 ðŸ¤– WHY AN INTERFACE IN SPRING?

 âœ… 1. Decoupling via Dependency Inversion (SOLID: DIP)
     â†’ Controllers depend on abstractions, not implementations.
     â†’ HOW? By injecting this interface, we can swap out its implementation (e.g., with KafkaCommandServiceImpl) without changing the controller.
     â†’ WHY? Promotes loose coupling, easier testing, and flexible architecture.

 âœ… 2. Makes JDK Dynamic Proxies Possible
     â†’ HOW? Spring AOP can generate proxies around interfaces using Java's built-in dynamic proxy mechanism (`Proxy.newProxyInstance()`).
     â†’ WHY? JDK proxies are lighter and safer because:
         - They don't require subclassing
         - Work even if the implementation class is `final`
         - Don't break `equals`, `hashCode`, or `toString` like CGLIB sometimes can
     â†’ Alternative (without interface): Spring falls back to CGLIB, which generates subclasses â€” less efficient and more error-prone.

 âœ… 3. Testability without Spring Context
     â†’ HOW? We can pass mocks (e.g., Mockito mocks) into controller tests:
         `given(service.create(...)).willReturn(...);`
     â†’ WHY? This avoids loading the full Spring context (with `@SpringBootTest`), so tests are:
         - 10â€“100x faster
         - More isolated
         - More deterministic (no bean lifecycle or auto-wiring surprises)

 âœ… 4. Future-Proofing with Decorators and Middleware
     â†’ HOW? Want to log execution time? Wrap the interface in a `LoggingCommandServiceDecorator`.
     â†’ Want retries? Use a `RetryingCommandServiceDecorator`.
     â†’ WHY? All this becomes trivial with an interface â€” we can compose behaviour dynamically
        (e.g., via Spring @Bean method returning a decorator chain),
        instead of being locked into a monolithic implementation.

 âœ… 5. Scales Well With CQRS
     â†’ HOW? Split reads (QueryService) from writes (CommandService).
     â†’ WHY? Enables eventual consistency, event sourcing, read replicas, and performance optimisations â€”
        none of which require redesigning your core controller logic.

 âœ… 6. Decorator Pattern for Cross-Cutting Concerns
     â†’ HOW? We can chain implementations like:
         `new LoggingQueryService(new CachingQueryService(new QueryServiceImpl(...)))`
     â†’ WHY? There is no need to pollute core logic with concerns such as metrics, logging, or authorisation.

*/
public interface SoftwareEngineerCommandService {

    SoftwareEngineerDTO create(SoftwareEngineerToCreateDTO softwareEngineerToCreateDTO);

    void update(Integer id, SoftwareEngineerToUpdateDTO softwareEngineerToUpdateDTO);

    void delete(Integer id);
}