package com.johncnstn.springbootdemo;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

/*
 * ✅ Bootstraps the full Spring application context for testing.
 *
 * - Loads the application just like `main()` would.
 * - Allows end-to-end (E2E), integration, and smoke tests.
 *
 * `webEnvironment = RANDOM_PORT`:
 *   → Starts the embedded web server on a random port (e.g., 52_983)
 *   → Prevents port conflicts during parallel test execution
 *   → Enables full-stack HTTP testing with TestRestTemplate or WebTestClient
 *
 * Best used for higher-level tests, not for isolated unit tests.
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)

/*
 * ✅ Activates the `e2e` Spring profile for this test class.
 *
 * - Looks for `application-e2e.yml` or `.properties`
 * - Useful for injecting test-specific beans or configs
 *   (e.g., mock URLs, in-memory DBs, test auth)
 *
 * Helps you separate dev/prod/e2e behavior cleanly.
 */
@ActiveProfiles("e2e")
class SpringBootDemoApplicationTests {

    /*
     * ✅ Sanity check that the Spring context loads without crashing.
     *
     * - Often auto-generated by Spring Initializr
     * - Doesn't test functionality, just ensures configuration is valid
     *
     * You can extend this test to check specific beans if needed:
     *   - assertThat(context.getBean(...)).isNotNull();
     *   - Use @Autowired to inject specific services
     */
    @Test
    void contextLoads() {
    }

}
